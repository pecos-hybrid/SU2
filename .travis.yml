# Continous Integration setup for SU2.
# Tests on the develop branch in both serial and parallel.

dist: xenial
sudo: required

# Language = c or c++ is necessary for easy use of ccache and Travis caching
language: c++

# Pip caching is not necessary.  It only saves a few seconds total.
cache:
    - ccache

compiler:
    - gcc

notifications:
    email:
        recipients:
            - clarkp@utexas.edu

branches:
    only:
        - pecos-dev
        - meson-build-system

addons:
  apt:
    update: true
    packages:
    - python3.6-dev
    - python3.6-venv
    - build-essential
    - swig
    - libopenmpi-dev
    - openmpi-bin
    - libboost-test-dev

matrix:
  include:
    - env:
        # Serial build and regression test
        - MESON_BUILD_DIR="$TRAVIS_BUILD_DIR/build"
        - CONFIGURE_COMMAND="python meson.py $MESON_BUILD_DIR --prefix=$TRAVIS_BUILD_DIR -Denable-pywrapper=true -Dwith-mpi=disabled --optimization=2 --warnlevel=2"
        - INSTALL_COMMAND="./ninja -C $MESON_BUILD_DIR install"
        - TEST_SCRIPT=serial_regression.py
      before_script:
        - git clone -b v6.0.1 https://github.com/su2code/TestCases.git ./TestData
        - cp -R ./TestData/* ./TestCases/
        - cd TestCases
      script:
        - travis_wait 90 && python $TEST_SCRIPT
    - env:
        # Parallel build and regression test
        - MESON_BUILD_DIR="$TRAVIS_BUILD_DIR/build"
        - CONFIGURE_COMMAND="python meson.py $MESON_BUILD_DIR --prefix=$TRAVIS_BUILD_DIR -Denable-pywrapper=true --optimization=2 --warnlevel=2"
        - INSTALL_COMMAND="./ninja -C $MESON_BUILD_DIR install"
        - TEST_SCRIPT=parallel_regression.py
      before_script:
        - git clone -b v6.0.1 https://github.com/su2code/TestCases.git ./TestData
        - cp -R ./TestData/* ./TestCases/
        - cd TestCases
      script:
        - travis_wait 90 && python $TEST_SCRIPT
    - env:
        # Serial build and unit-test with meson
        - MESON_BUILD_DIR="$TRAVIS_BUILD_DIR/build"
        - CONFIGURE_COMMAND="python meson.py $MESON_BUILD_DIR --prefix=$TRAVIS_BUILD_DIR -Denable-pywrapper=true -Dwith-mpi=disabled -Denable-boost-utf=true --optimization=2 --warnlevel=2"
        - INSTALL_COMMAND="./ninja -C $MESON_BUILD_DIR install"
      before_script:
        - echo `which python`
      script:
        - ./ninja -C $MESON_BUILD_DIR test
    - env:
        # Parallel build and unit-test with meson
        - MESON_BUILD_DIR="$TRAVIS_BUILD_DIR/build"
        - CONFIGURE_COMMAND="python meson.py $MESON_BUILD_DIR --prefix=$TRAVIS_BUILD_DIR -Denable-pywrapper=true -Denable-boost-utf=true --optimization=2 --warnlevel=2"
        - INSTALL_COMMAND="./ninja -C $MESON_BUILD_DIR install"
      before_script:
        - echo `which python`
      script:
        - ./ninja -C $MESON_BUILD_DIR test
    - env:
        # Serial build and unit-test with autotools
        - CONFIGURE_COMMAND="python preconfigure.py --prefix=$TRAVIS_BUILD_DIR --with-boost-utf=/usr/ --disable-tecio"
        - INSTALL_COMMAND="make install -j 4"
      before_script:
        - echo `which python`
      script:
        - cd $TRAVIS_BUILD_DIR
        - make check -j4
    - env:
        # Parallel build and unit-test with autotools
        - CONFIGURE_COMMAND="python preconfigure.py --enable-mpi --with-cc=mpicc --with-cxx=mpicxx --prefix=$TRAVIS_BUILD_DIR --with-boost-utf=/usr/ --disable-tecio"
        - INSTALL_COMMAND="make install -j 4"
      before_script:
        - echo `which python`
      script:
        - cd $TRAVIS_BUILD_DIR
        - make check -j4

before_install:
    # Since the language is not `python`, we need to create our own virtualenv
    - python3.6 -m venv $HOME/.pyenv
    - source $HOME/.pyenv/bin/activate
    - pip install --upgrade pip
    - pip install wheel
    - pip install numpy
    - pip install scipy
    # Make sure mpi4py finds the right mpicc and mpicxx
    - export MPICC=`which mpicc`
    - export MPICXX=`which mpicxx`
    - pip install mpi4py
    # Display the packages used
    - echo `pip freeze`

    # to avoid interference with MPI
    - test -n $CC  && unset CC
    - test -n $CXX && unset CXX

install:
    # build ninja
    - echo `which python`
    - echo $CONFIGURE_COMMAND
    - ./bootstrap
    - $CONFIGURE_COMMAND
    - echo $INSTALL_COMMAND
    - $INSTALL_COMMAND

    # Add environmental variables according to the configure step
    - export SU2_RUN=$TRAVIS_BUILD_DIR/bin
    - export SU2_HOME=$TRAVIS_BUILD_DIR
    - export PATH=$PATH:$SU2_RUN
    - export PYTHONPATH=$PYTHONPATH:$SU2_RUN
