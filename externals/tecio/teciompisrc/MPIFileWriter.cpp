#include "MPIFileWriter.h"
#include "ThirdPartyHeadersBegin.h"
#include <cstdarg>
#include <cstring>
#include <sstream>
#include <vector>
#include <boost/format.hpp>
#include "ThirdPartyHeadersEnd.h"
#include "CodeContract.h"
using namespace tecplot::___3933; namespace tecplot { namespace teciompi { MPIFileWriter::MPIFileWriter(std::string const& ___1394, MPI_Comm comm) : m_comm(comm) , m_fileHandle(NULL) , ___2461(___1394) , m_isAscii(false) , m_dataFileType(___845) {} MPIFileWriter::~MPIFileWriter() { close(true); } ___372 MPIFileWriter::___2041() const { return m_fileHandle != NULL; } ___372 MPIFileWriter::open(bool update) { REQUIRE(!___2041()); int ___2504 = MPI_MODE_CREATE; if (update) ___2504 |= MPI_MODE_RDWR; else ___2504 |= MPI_MODE_WRONLY; int ___3358 = MPI_File_open(m_comm, const_cast<char*>(___1394().c_str()), ___2504, MPI_INFO_NULL, &m_fileHandle); ___372 ___2039 = ___3358 == MPI_SUCCESS; if (___2039) { if (!update) MPI_File_set_size(m_fileHandle, (MPI_Offset)0); } else { m_fileHandle = NULL; char msg[MPI_MAX_ERROR_STRING]; int resultlen; MPI_Error_string(___3358, msg, &resultlen); std::cout << "Error opening file: " << msg << std::endl; } return ___2039; } ___372 MPIFileWriter::close(bool ___3361) { int ___3358 = MPI_SUCCESS; if (___2041()) { ___3358 = MPI_File_close(&m_fileHandle); m_fileHandle = NULL; if (!___3361) { int ___2676; MPI_Comm_rank(m_comm, &___2676); if (___2676 == 0) MPI_File_delete(const_cast<char*>(___1394().c_str()), MPI_INFO_NULL); } } ENSURE(!___2041()); return (___3358 == MPI_SUCCESS ? ___4226 : ___1305); } ___3933::___1393 MPIFileWriter::fileLoc() { REQUIRE(___2041()); MPI_Offset mpiOffset = 0; MPI_File_get_position(m_fileHandle, &mpiOffset); return static_cast<___3933::___1393>(mpiOffset); } ___372 MPIFileWriter::___3460() { REQUIRE(___2041()); MPI_Offset mpiOffset = 0; int ___3358 = MPI_File_seek(m_fileHandle, mpiOffset, MPI_SEEK_SET); return (___3358 == MPI_SUCCESS ? ___4226 : ___1305); } ___372 MPIFileWriter::___3459(___3933::___1393 fileLoc) { REQUIRE(___2041()); MPI_Offset mpiOffset = static_cast<MPI_Offset>(fileLoc); int ___3358 = MPI_File_seek(m_fileHandle, mpiOffset, MPI_SEEK_SET); return (___3358 == MPI_SUCCESS ? ___4226 : ___1305); } ___372 MPIFileWriter::seekToFileEnd() { REQUIRE(___2041()); MPI_Offset mpiOffset = 0; int ___3358 = MPI_File_seek(m_fileHandle, mpiOffset, MPI_SEEK_END); return (___3358 == MPI_SUCCESS ? ___4226 : ___1305); } std::string const& MPIFileWriter::___1394() const { return ___2461; } void MPIFileWriter::___3494(___372 ___2002) { REQUIRE(VALID_BOOLEAN(___2002)); m_isAscii = (___2002 == ___4226); } ___372 MPIFileWriter::___2002() const { return m_isAscii; } void MPIFileWriter::setDataFileType(DataFileType_e ___844) { REQUIRE(VALID_ENUM(___844, DataFileType_e)); m_dataFileType = ___844; } DataFileType_e MPIFileWriter::___844() const { return m_dataFileType; } class FileIOStatistics& MPIFileWriter::statistics() { return m_statistics; } size_t MPIFileWriter::fwrite(void const* ___416, size_t size, size_t count) { REQUIRE(___2041()); REQUIRE(size == 1 || size == 2 || size == 4 || size == 8 || size == 16); MPI_Datatype mpiTypes[] = { MPI_DATATYPE_NULL, MPI_INT8_T, MPI_INT16_T, MPI_DATATYPE_NULL, MPI_INT32_T, MPI_DATATYPE_NULL, MPI_DATATYPE_NULL, MPI_DATATYPE_NULL, MPI_INT64_T }; int ___3358; if (size < 16) ___3358 = MPI_File_write(m_fileHandle, const_cast<void*>(___416), static_cast<int>(count), mpiTypes[size], MPI_STATUS_IGNORE); else ___3358 = MPI_File_write(m_fileHandle, const_cast<void*>(___416), static_cast<int>(2 * count), MPI_INT64_T, MPI_STATUS_IGNORE); if (___3358 == MPI_SUCCESS) return count; else return 0; } int MPIFileWriter::fprintf(char const* format, ...) { REQUIRE(___2041()); std::vector<char> vec(strlen(format) + 1); bool done = false; int numChars = 0; while (!done) { va_list ap; va_start(ap, format);
 #if defined _WIN32
numChars = vsnprintf_s(&vec[0], vec.size(), _TRUNCATE, format, ap); if (numChars > 0) done = true; else vec.resize(vec.size() * 2);
 #else
numChars = vsnprintf(&vec[0], vec.size(), format, ap); if (numChars < static_cast<int>(vec.size())) done = true; else vec.resize(static_cast<size_t>(numChars + 1));
 #endif
va_end (ap); } ___478(numChars < static_cast<int>(vec.size())); int ___3358 = MPI_File_write(m_fileHandle, &vec[0], numChars, MPI_CHAR, MPI_STATUS_IGNORE); if (___3358 == MPI_SUCCESS) return numChars; else return 0; } }}
