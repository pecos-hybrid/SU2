su2_cfd_include = include_directories('./')
su2_cfd_src = files(['output_structure.cpp',
                     'output_cgns.cpp',
                     'output_fieldview.cpp',
                     'output_paraview.cpp',
                     'output_physics.cpp',
                     'output_su2.cpp',
                     'output_tecplot.cpp',
                     'solver_direct_transition.cpp',
                     'solver_adjoint_turbulent.cpp',
                     'integration_structure.cpp',
                     'solver_direct_mean_fem.cpp',
                     'numerics_adjoint_mean.cpp',
                     'transport_model.cpp',
                     'numerics_adjoint_turbulent.cpp',
                     'fluid_model_pvdw.cpp',
                     'integration_time.cpp',
                     'fluid_model_pig.cpp',
                     'solver_direct_mean.cpp',
                     'iteration_structure.cpp',
                     'fluid_model_inc.cpp',
                     'solver_adjoint_mean.cpp',
                     'solver_adjoint_elasticity.cpp',
                     'solver_structure.cpp',
                     'numerics_direct_transition.cpp',
                     'solver_template.cpp',
                     'solver_direct_elasticity.cpp',
                     'definition_structure.cpp',
                     'numerics_direct_mean_inc.cpp',
                     'transfer_physics.cpp',
                     'solver_direct_turbulent.cpp',
                     'solver_direct_turbulent_v2f.cpp',
                     'fluid_model.cpp',
                     'solver_direct_mean_inc.cpp',
                     'numerics_direct_mean.cpp',
                     'solver_direct_heat.cpp',
                     'numerics_direct_heat.cpp',
                     'fluid_model_ppr.cpp',
                     'numerics_direct_elasticity.cpp',
                     'numerics_direct_turbulent.cpp',
                     'numerics_direct_turbulent_v2f.cpp',
                     'numerics_direct_elasticity_linear.cpp',
                     'python_wrapper_structure.cpp',
                     'numerics_structure.cpp',
                     'numerics_template.cpp',
                     'transfer_structure.cpp',
                     'solver_adjoint_discrete.cpp',
                     'numerics_direct_elasticity_nonlinear.cpp',
                     'driver_structure.cpp',
                     'numerics_direct_mean_hybrid.cpp',
                     'fluctuating_stress.cpp',
                     'hybrid_RANS_LES_forcing.cpp',
                     'hybrid_RANS_LES_model.cpp',
                     'variable_adjoint_mean.cpp',
                     'variable_adjoint_turbulent.cpp',
                     'variable_adjoint_discrete.cpp',
                     'variable_adjoint_elasticity.cpp',
                     'variable_direct_heat.cpp',
                     'variable_direct_mean.cpp',
                     'variable_direct_mean_inc.cpp',
                     'variable_direct_transition.cpp',
                     'variable_direct_turbulent.cpp',
                     'variable_direct_turbulent_v2f.cpp',
                     'variable_direct_elasticity.cpp',
                     'variable_structure.cpp',
                     'variable_template.cpp',
                     'slice_file_reader.cpp',
                     'data_manufactured_solutions.cpp',
                     'driver_direct_multizone.cpp',
                     'driver_direct_singlezone.cpp'])

if get_option('enable-normal')
  su2_cfd_lib = static_library('SU2_CFD',
                       su2_cfd_src,
      		       install : false,
		       dependencies : [su2_deps, common_dep],
		       cpp_args:  [default_warning_flags, su2_cpp_args])
  su2_cfd_dep = declare_dependency(link_with: su2_cfd_lib,
                                   include_directories: su2_cfd_include)
  su2_cfd = executable('SU2_CFD', 'SU2_CFD.cpp',
                       install : true,
                       dependencies : [su2_cfd_dep, common_dep, su2_deps],
		       cpp_args: ['-fPIC'] + [default_warning_flags, su2_cpp_args])
endif

if get_option('enable-autodiff')
  su2_cfd_ad = executable('SU2_CFD_AD',
                          su2_cfd_src,
			  install : true,
			  dependencies : [su2_deps, codi_dep, commonAD_dep],
			  cpp_args: ['-fPIC'] + [default_warning_flags, su2_cpp_args, codi_rev_args])
endif

if get_option('enable-directdiff')
  su2_cfd_dd = executable('SU2_CFD_DIRECTDIFF',
                          su2_cfd_src,
			  install : true,
			  dependencies : [su2_deps, codi_dep, commonDD_dep],
			  cpp_args: ['-fPIC'] + [default_warning_flags, su2_cpp_args, codi_for_args])
endif
